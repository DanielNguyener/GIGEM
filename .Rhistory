data(iris)
write.csv(iris)
View(iris)
shiny::runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler_Week4')
runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler_Week4')
runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler_Week4')
runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler_Week4')
# Use transcription data of morph-control comparisons
# empty dataframe for control condition
condition_control <- data.frame()
shiny::runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler_Week4')
runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler_Week4')
shiny::runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler/cavecrawler')
runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler_Week4')
runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler_Week4')
runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler_Week4')
runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler_Week4')
runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler_Week4')
runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler/cavecrawler')
runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler_Week4')
runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler/cavecrawler')
shiny::runApp('C:/Users/Daniel/Desktop/introtoR/CaveCrawler/QTL_troubleshooting')
library(knitr)
opts_chunk$set(cache = TRUE, fig.align = "center", echo=TRUE)
tung_counts <- read.table("data/tung/molecules.txt", sep = "\t")
tung_annotation <- read.table("data/tung/annotation.txt", sep = "\t", header = TRUE)
# load the library
library(SingleCellExperiment)
# note that the data passed to the assay slot has to be a matrix!
tung <- SingleCellExperiment(
assays = list(counts = as.matrix(tung_counts)),
colData = tung_annotation
)
# remove the original tables as we don't need them anymore
rm(tung_counts, tung_annotation)
tung
counts(tung)
assay(tung, "counts")
?ft()
data <- c(1.1, 2.3, 3.5, 4.7, 5.1, 5.3, 5.7, 6.4, 6.7, 6.9, 7.3, 7.4, 7.5, 7.9, 8.3, 8.9, 9.7, 10.1, 11.4, 12.4)
bin(20,0.4)
binom.test(20,0.4)
stats(data)
summary(data)
binom.test(20,7.10)
binom.test(7.10, 20)
binom.test(7, 20)
?sign.test()
quantile(data, probs = c(0.40))
?pbinom()
n = 20
rm(df)
b <- rep(20, 0.4)
b
b <- binomial(20, 0.4)
binomial()
?binomial
b <- binom(20, 0.4)
b <- dbinom(data, size=20, prob=0.4)
b <- dbinom(data, prob=0.4)
b <- rbinom(data, prob=0.4)
b <- rbinom(20, prob=0.4)
b <- rbinom(size=20, prob=0.4)
b <- rbinom(n=20, prob=0.4)
rbinom()
?rbinom()
b <- rbinom(n=20, size=1 prob=0.4)
b <- rbinom(n=20, size=1, prob=0.4)
b
?t.test()
c <- data < 7
data <- c(1.1, 2.3, 3.5, 4.7, 5.1, 5.3, 5.7, 6.4, 6.7, 6.9, 7.3, 7.4, 7.5, 7.9, 8.3, 8.9, 9.7, 10.1, 11.4, 12.4)
Y <- sum(data > 6.58)
n <- length(data)
numberator <- Y - (n/2)
denom <- sqrt(n) / 2
sign_stat <- numberator / denom
sign_stat
pval <- 2*(1-pnorm(sign_stat))
setwd("C:/Users/Daniel/OneDrive - Texas A&M University/Wanhe_Li/Esther/July/Sleep")
setwd("C:/Users/Daniel/Desktop/WanheLi_Lab/Wanhe_Li/GIGEM/GIGEM")
load(norm_summary.RData)
load("norm_summary.Rdata")
View(results)
write.csv(results, file="normSummary.csv", row.names=FALSE)
